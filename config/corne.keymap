/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 /*          42 KEY MATRIX / LAYOUT MAPPING
  ╭────────────────────────┬────────────────────────╮ 
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ 
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ 
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ 
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ 
              ╰────────────┴────────────╯             */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
#define GAMING 3

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
  };

&caps_word {
    continue-list = <UNDERSCORE MINUS SPACE SINGLE_QUOTE DOUBLE_QUOTES EXCLAMATION QUESTION BACKSPACE>;
}; 

/ 
 

{

 behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    }; 

    combos {
                compatible = "zmk,combos";

                /* Chop Column 6 */     
                COMBO(escape, &kp ESC, 2 3, DEFAULT) 
                COMBO(tab, &kp TAB, 3 4, DEFAULT) 

                      
                /* Text processing */
                COMBO(cut, &kp LC(X), 25 26, DEFAULT) 
                COMBO(copy, &kp LC(C), 26 27, DEFAULT) 
                COMBO(paste, &kp LC(V)E, 27 28, DEFAULT) 

                /* Brackets */     
                COMBO(left_par, &kp LPAR, 7 8, DEFAULT) 
                COMBO(right_par, &kp RPAR, 8 9, DEFAULT) 
                COMBO(left_bkt, &kp LBKT, 19 20, DEFAULT) 
                COMBO(right_bkt, &kp RBKT, 20 21, DEFAULT) 
                COMBO(less_than, &kp LESS_THAN, 31 32, DEFAULT) 
                COMBO(greater_than, &kp GREATER_THAN, 32 33, DEFAULT) 

                /* Numerical Operations */     
                COMBO(num_equal, &kp EQUAL, 9 21, DEFAULT)
                COMBO(num_excl, &kp EXCLAMATION, 1 11, DEFAULT)
                COMBO(num_at, &kp AT, 2 14, DEFAULT)
                COMBO(num_hash, &kp HASH, 3 15, DEFAULT)
                COMBO(num_dollar, &kp DOLLAR, 4 16, DEFAULT)
                COMBO(num_percent, &kp PERCENT, 5 17, DEFAULT)
                COMBO(num_plus, &kp KP_PLUS, 7 19, DEFAULT) 
                COMBO(num_minus, &kp KP_MINUS, 19 31, DEFAULT) 
                COMBO(num_multiply, &kp KP_MULTIPLY, 8 20, DEFAULT) 
                COMBO(num_divide, &kp KP_DIVIDE, 20 32, DEFAULT) 
                COMBO(num_underscore, &kp UNDERSCORE, 21 33, DEFAULT) 
                COMBO(num_amp, &kp AMPS, 6 18, DEFAULT) 
                COMBO(num_pipe, &kp PIPE, 18 30, DEFAULT) 
                COMBO(num_tilde, &kp TILDE, 17 29, DEFAULT) 

                /* Navigation */     
                COMBO(page_up, &kp PAGE_UP, 14 15, DEFAULT) 
                COMBO(page_down, &kp PAGE_DOWN, 15 16, DEFAULT) 
                COMBO(home, &kp HOME, 13 14, DEFAULT) 
                COMBO(end, &kp END, 16 17, DEFAULT) 

                /* Toggle Layer */     
                COMBO(page_up, &tog GAMING, 37 40, DEFAULT GAMING) 
                            
        };



        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT  |
//                    | ALT | RSE | ENT |   | SPC | LWR  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &hm LGUI A &hm LALT S &hm LSHFT D &hm LCTRL F &kp G   &kp H &hm RCTRL J  &hm RSHFT K &hm RALT L &hm RGUI SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &mt LALT LGUI &mo RAISE &kp RET   &kp SPACE &mo LOWER &mt LALT LGUI
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | CAPS |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCL | BT1 | BT2 | BT3 | BT4 | BT5 |   | F11 | F12 |     | vup | vdw | mute |
// | SHFT |  F1 |  F2 |  F3 | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 | SHFT |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &caps_word    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp F11   &kp F12      &trans      &kp C_VOL_UP    &kp C_VOL_DN &kp C_MUTE
   &kp LSHFT  &kp F1    &kp F2  &kp F3  &kp F4  &kp F5  &kp F6   &kp F7 &kp F8  &kp F9  &kp F10 &trans
                                   &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };

                raise_layer {
 // -----------------------------------------------------------------------------------------
// | ESC  | CUT | CPY | PST | CTA | PRN |   |  7  |  8  |  9  | REC | INS | DEL |
// | CTRL | HME | END |  =  |  -  |  _  |   |  4  |  5  |  6  |     |  UP | "\"  |
// | SHFT | CTZ |  (  |  )  |  [  |  ]  |   |  1  |  2  |  3  | LFT | DWN | RGT  |
//                    | ALT  |    | ENT |   | SPC |  0  | ALT |
                        bindings = <
   &kp ESC      &kp LC(X)       &kp LC(C)       &kp LC(V)       &kp LC(A)       &kp PSCRN       &kp KP_N7 &kp KP_N8  &kp KP_N9 &kp LA(LG(R)) &kp INS &kp DEL
   &kp LCTRL &kp HOME   &kp END &kp EQUAL       &kp MINUS   &kp UNDER   &kp KP_N4 &kp KP_N5 &kp KP_N6        &trans &kp UP &kp BSLH
   &kp LSHFT &kp LC(Z)   &kp LPAR       &kp RPAR   &kp LBKT     &kp RBKT      &kp KP_N1 &kp KP_N2  &kp KP_N3        &kp LEFT &kp DOWN &kp RIGHT
                          &trans &trans   &trans   &trans       &kp KP_N0  &trans
                        >;
                };

                gaming_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT  |
//                    | ALT | RSE | ENT |   | SPC | LWR  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K &kp L &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &mt LALT LGUI &mo RAISE &kp RET   &kp SPACE &mo LOWER &mt LALT LGUI
                        >;
                };
        };
};